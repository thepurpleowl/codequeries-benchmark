Path,Url,Description,Hops,Span
python/ql/src/Classes/ConflictingAttributesInBaseClasses.ql,https://github.com/github/codeql/tree/main/python/ql/src/Classes/ConflictingAttributesInBaseClasses.ql,"When a class subclasses multiple base classes and more than one base class defines the same attribute, attribute overriding may result in unexpected behavior by instances of this class.",k,k
python/ql/src/Classes/DefineEqualsWhenAddingAttributes.ql,https://github.com/github/codeql/tree/main/python/ql/src/Classes/DefineEqualsWhenAddingAttributes.ql,"When adding new attributes to instances of a class, equality for that class needs to be defined.",k,k
python/ql/src/Classes/EqualsOrHash.ql,https://github.com/github/codeql/tree/main/python/ql/src/Classes/EqualsOrHash.ql,Defining equality for a class without also defining hashability (or vice-versa) violates the object model.,k,1
python/ql/src/Classes/IncompleteOrdering.ql,https://github.com/github/codeql/tree/main/python/ql/src/Classes/IncompleteOrdering.ql,Class defines one or more ordering method but does not define all 4 ordering comparison methods,k,1
python/ql/src/Exceptions/CatchingBaseException.ql,https://github.com/github/codeql/tree/main/python/ql/src/Exceptions/CatchingBaseException.ql,Handling 'BaseException' means that system exits and keyboard interrupts may be mis-handled.,1,1
python/ql/src/Exceptions/IllegalRaise.ql,https://github.com/github/codeql/tree/main/python/ql/src/Exceptions/IllegalRaise.ql,Raising a non-exception object or type will result in a TypeError being raised instead.,1,1
python/ql/src/Exceptions/NotImplementedIsNotAnException.ql,https://github.com/github/codeql/tree/main/python/ql/src/Exceptions/NotImplementedIsNotAnException.ql,Using 'NotImplemented' as an exception will result in a type error.,1,1
python/ql/src/Exceptions/UnguardedNextInGenerator.ql,https://github.com/github/codeql/tree/main/python/ql/src/Exceptions/UnguardedNextInGenerator.ql,Calling next() in a generator may cause unintended early termination of an iteration.,1,k
python/ql/src/Expressions/CallToSuperWrongClass.ql,https://github.com/github/codeql/tree/main/python/ql/src/Expressions/CallToSuperWrongClass.ql,Calling super with something other than the enclosing class may cause incorrect object initialization.,1,k
python/ql/src/Expressions/CompareConstants.ql,https://github.com/github/codeql/tree/main/python/ql/src/Expressions/CompareConstants.ql,"Comparison of constants is always constant, but is harder to read than a simple constant.",1,k
python/ql/src/Expressions/CompareIdenticalValues.ql,https://github.com/github/codeql/tree/main/python/ql/src/Expressions/CompareIdenticalValues.ql,"Comparison of identical values, the intent of which is unclear.",1,k
python/ql/src/Expressions/Comparisons/UselessComparisonTest.ql,https://github.com/github/codeql/tree/main/python/ql/src/Expressions/Comparisons/UselessComparisonTest.ql,The result of a comparison is implied by a previous comparison.,1,k
python/ql/src/Expressions/DuplicateKeyInDictionaryLiteral.ql,https://github.com/github/codeql/tree/main/python/ql/src/Expressions/DuplicateKeyInDictionaryLiteral.ql,Duplicate key in dict literal. All but the last will be lost.,1,k
python/ql/src/Expressions/EqualsNone.ql,https://github.com/github/codeql/tree/main/python/ql/src/Expressions/EqualsNone.ql,Testing whether an object is 'None' using the == operator is inefficient and potentially incorrect.,1,k
python/ql/src/Expressions/IncorrectComparisonUsingIs.ql,https://github.com/github/codeql/tree/main/python/ql/src/Expressions/IncorrectComparisonUsingIs.ql,Comparison using 'is' when equivalence is not the same as identity,1,k
python/ql/src/Expressions/NonCallableCalled.ql,https://github.com/github/codeql/tree/main/python/ql/src/Expressions/NonCallableCalled.ql,A call to an object which is not a callable will raise a TypeError at runtime.,k,k
python/ql/src/Expressions/UnintentionalImplicitStringConcatenation.ql,https://github.com/github/codeql/tree/main/python/ql/src/Expressions/UnintentionalImplicitStringConcatenation.ql,Omitting a comma between strings causes implicit concatenation which is confusing in a list.,1,k
python/ql/src/Expressions/WrongNumberArgumentsInCall.ql,https://github.com/github/codeql/tree/main/python/ql/src/Expressions/WrongNumberArgumentsInCall.ql,Using too many or too few arguments in a call to a function will result in a TypeError at runtime.,k,k
python/ql/src/Functions/DeprecatedSliceMethod.ql,https://github.com/github/codeql/tree/main/python/ql/src/Functions/DeprecatedSliceMethod.ql,Defining special methods for slicing has been deprecated since Python 2.0.,1,1
python/ql/src/Functions/IncorrectRaiseInSpecialMethod.ql,https://github.com/github/codeql/tree/main/python/ql/src/Functions/IncorrectRaiseInSpecialMethod.ql,Raising a non-standard exception in a special method alters the expected interface of that method.,1,k
python/ql/src/Functions/ModificationOfParameterWithDefault.ql,https://github.com/github/codeql/tree/main/python/ql/src/Functions/ModificationOfParameterWithDefault.ql,Modifying the default value of a parameter can lead to unexpected results.,1,1
python/ql/src/Functions/NonSelf.ql,https://github.com/github/codeql/tree/main/python/ql/src/Functions/NonSelf.ql,Using an alternative name for the first parameter of an instance method makes code more difficult to read; PEP8 states that the first parameter to instance methods should be 'self'.,1,1
python/ql/src/Functions/SignatureOverriddenMethod.ql,https://github.com/github/codeql/tree/main/python/ql/src/Functions/SignatureOverriddenMethod.ql,Overriding a method without ensuring that both methods accept the same number and type of parameters has the potential to cause an error when there is a mismatch.,k,1
python/ql/src/Functions/SignatureSpecialMethods.ql,https://github.com/github/codeql/tree/main/python/ql/src/Functions/SignatureSpecialMethods.ql,Special method has incorrect signature,1,1
python/ql/src/Functions/UseImplicitNoneReturnValue.ql,https://github.com/github/codeql/tree/main/python/ql/src/Functions/UseImplicitNoneReturnValue.ql,The return value of a procedure (a function that does not return a value) is used. This is confusing to the reader as the value (None) has no meaning.,k,k
python/ql/src/Imports/DeprecatedModule.ql,https://github.com/github/codeql/tree/main/python/ql/src/Imports/DeprecatedModule.ql,Import of a deprecated module,1,k
python/ql/src/Imports/ImportandImportFrom.ql,https://github.com/github/codeql/tree/main/python/ql/src/Imports/ImportandImportFrom.ql,"A module is imported with the ""import"" and ""import from"" statements",1,k
python/ql/src/Imports/MultipleImports.ql,https://github.com/github/codeql/tree/main/python/ql/src/Imports/MultipleImports.ql,Importing a module a second time has no effect and impairs readability,1,k
python/ql/src/Imports/UnusedImport.ql,https://github.com/github/codeql/tree/main/python/ql/src/Imports/UnusedImport.ql,Import is not required as it is not used,k,k
python/ql/src/Security/CWE-020/IncompleteUrlSubstringSanitization.ql,https://github.com/github/codeql/tree/main/python/ql/src/Security/CWE-020/IncompleteUrlSubstringSanitization.ql,Security checks on the substrings of an unparsed URL are often vulnerable to bypassing.,1,k
python/ql/src/Security/CWE-215/FlaskDebug.ql,https://github.com/github/codeql/tree/main/python/ql/src/Security/CWE-215/FlaskDebug.ql,Running a Flask app in debug mode may allow an attacker to run arbitrary code through the Werkzeug debugger.,1,k
python/ql/src/Security/CWE-377/InsecureTemporaryFile.ql,https://github.com/github/codeql/tree/main/python/ql/src/Security/CWE-377/InsecureTemporaryFile.ql,Creating a temporary file using this method may be insecure.,k,k
python/ql/src/Statements/ConstantInConditional.ql,https://github.com/github/codeql/tree/main/python/ql/src/Statements/ConstantInConditional.ql,The conditional is always true or always false,1,k
python/ql/src/Statements/ModificationOfLocals.ql,https://github.com/github/codeql/tree/main/python/ql/src/Statements/ModificationOfLocals.ql,Modifications of the dictionary returned by locals() are not propagated to the local variables of a function.,k,k
python/ql/src/Statements/NestedLoopsSameVariable.ql,https://github.com/github/codeql/tree/main/python/ql/src/Statements/NestedLoopsSameVariable.ql,Nested loops in which the target variable is the same for each loop make the behavior of the loops difficult to understand.,1,k
python/ql/src/Statements/RedundantAssignment.ql,https://github.com/github/codeql/tree/main/python/ql/src/Statements/RedundantAssignment.ql,Assigning a variable to itself is useless and very likely indicates an error in the code.,1,k
python/ql/src/Statements/ShouldUseWithStatement.ql,https://github.com/github/codeql/tree/main/python/ql/src/Statements/ShouldUseWithStatement.ql,Using a 'try-finally' block to ensure only that a resource is closed makes code more difficult to read.,1,1
python/ql/src/Statements/SideEffectInAssert.ql,https://github.com/github/codeql/tree/main/python/ql/src/Statements/SideEffectInAssert.ql,Side-effects in assert statements result in differences between normal and optimized behavior.,1,k
python/ql/src/Statements/UnnecessaryDelete.ql,https://github.com/github/codeql/tree/main/python/ql/src/Statements/UnnecessaryDelete.ql,"Using a 'delete' statement to delete a local variable is unnecessary, because the variable is deleted automatically when the function exits.",1,k
python/ql/src/Statements/UnnecessaryElseClause.ql,https://github.com/github/codeql/tree/main/python/ql/src/Statements/UnnecessaryElseClause.ql,An 'else' clause in a 'for' or 'while' statement that does not contain a 'break' is redundant.,1,k
python/ql/src/Statements/UnnecessaryPass.ql,https://github.com/github/codeql/tree/main/python/ql/src/Statements/UnnecessaryPass.ql,Unnecessary 'pass' statement,1,k
python/ql/src/Statements/UnreachableCode.ql,https://github.com/github/codeql/tree/main/python/ql/src/Statements/UnreachableCode.ql,Code is unreachable,1,k
python/ql/src/Testing/ImpreciseAssert.ql,https://github.com/github/codeql/tree/main/python/ql/src/Testing/ImpreciseAssert.ql,Using 'assertTrue' or 'assertFalse' rather than a more specific assertion can give uninformative failure messages.,1,k
python/ql/src/Variables/GlobalAtModuleLevel.ql,https://github.com/github/codeql/tree/main/python/ql/src/Variables/GlobalAtModuleLevel.ql,Use of the 'global' statement at module level,1,k
python/ql/src/Variables/MultiplyDefined.ql,https://github.com/github/codeql/tree/main/python/ql/src/Variables/MultiplyDefined.ql,Assignment to a variable occurs multiple times without any intermediate use of that variable,1,k
python/ql/src/Variables/SuspiciousUnusedLoopIterationVariable.ql,https://github.com/github/codeql/tree/main/python/ql/src/Variables/SuspiciousUnusedLoopIterationVariable.ql,"A loop iteration variable is unused, which suggests an error.",1,k
python/ql/src/Variables/UnusedLocalVariable.ql,https://github.com/github/codeql/tree/main/python/ql/src/Variables/UnusedLocalVariable.ql,Local variable is defined but not used,1,k
python/ql/src/Classes/MissingCallToInit.ql,https://github.com/github/codeql/tree/main/python/ql/src/Classes/MissingCallToInit.ql,An omitted call to a super-class `__init__` method may lead to objects of this class not being fully initialized.,1,1
python/ql/src/Classes/InitCallsSubclassMethod.ql,https://github.com/github/codeql/tree/main/python/ql/src/Classes/InitCallsSubclassMethod.ql,Calling a method from `__init__` that is overridden by a subclass may result in a partially initialized instance being observed.,k,1
python/ql/src/Functions/IterReturnsNonIterator.ql,https://github.com/github/codeql/tree/main/python/ql/src/Functions/IterReturnsNonIterator.ql,"The `__iter__` method returns a non-iterator which, if used in a 'for' loop, would raise a 'TypeError'.",1,1
python/ql/src/Imports/UnintentionalImport.ql,https://github.com/github/codeql/tree/main/python/ql/src/Imports/UnintentionalImport.ql,Importing a module using 'import *' may unintentionally pollute the global namespace if the module does not define `__all__`,1,1
python/ql/src/Classes/WrongNumberArgumentsInClassInstantiation.ql,https://github.com/github/codeql/tree/main/python/ql/src/Classes/WrongNumberArgumentsInClassInstantiation.ql,Using too many or too few arguments in a call to the `__init__` method of a class will result in a TypeError at runtime.,k,1